buildscript {
    ext.dropWizardVersion = '2.0.0'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "com.heroku.sdk.heroku-gradle" version "1.0.1"
}


configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

version '1.0'
group 'com.beust.cedlinks'
description 'CedLinks'

//apply plugin: 'kotlin'
//apply plugin: 'application'
//apply plugin: 'com.heroku.sdk.heroku-gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion"),
        "io.micronaut:micronaut-inject-java",
        "io.micronaut:micronaut-validation"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion"),
            "io.micronaut:micronaut-inject",
            "io.micronaut:micronaut-validation",
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
            "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}",
            "io.micronaut.kotlin:micronaut-kotlin-runtime",
            "io.micronaut:micronaut-runtime",
            "io.micronaut:micronaut-http-server-netty",
            "io.micronaut:micronaut-http-client"

    runtimeOnly "ch.qos.logback:logback-classic",
            "com.fasterxml.jackson.module:jackson-module-kotlin"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion"),
            "io.micronaut:micronaut-inject-java"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion"),
            "org.junit.jupiter:junit-jupiter-api",
            "io.micronaut.test:micronaut-test-junit5"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    compile "com.github.spullara.mustache.java:compiler:0.9.6",
        "org.postgresql:postgresql:42.2.14.jre7",
        "org.jetbrains.exposed:exposed:0.12.1",

//        "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
//        "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
//        "com.google.inject:guice:4.2.0",
//        "io.dropwizard:dropwizard-core:$dropWizardVersion",
//        "io.dropwizard:dropwizard-views-mustache:$dropWizardVersion",
        "com.squareup.retrofit2:retrofit:2.9.0",
        "com.squareup.retrofit2:converter-gson:2.9.0",
        "com.squareup.okhttp3:logging-interceptor:3.9.0"

//    implementation platform("ru.vyarus:dropwizard-guicey:5.1.0")

    // no need to specify versions
//    implementation 'ru.vyarus:dropwizard-guicey'

//    implementation 'io.dropwizard:dropwizard-auth'
//    implementation 'com.google.inject:guice-assistedinject'

//    testImplementation 'io.dropwizard:dropwizard-test'
//    testImplementation 'org.spockframework:spock-core'

    testCompile "org.testng:testng:6.14.3"
}

test.classpath += configurations.developmentOnly

mainClassName = 'com.beust.cedlinks.MainKt'

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "example.micronaut.*")
        arg("micronaut.processing.group", "example.micronaut")
        arg("micronaut.processing.module", "complete")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}


//def demoPort = System.getenv("PORT") ?: 80
//applicationDefaultJvmArgs = ["-Ddw.server.applicationConnectors[0].port=" + demoPort.toString()]

//run {
//    args = ['server', 'config.yml']
//}

shadowJar {
    baseName "ced-links"
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.version
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC"))
                .format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
}

// Heroku

task stage(dependsOn: ['shadowJar', 'clean'])

heroku {
    appName = 'ced-links'
}
